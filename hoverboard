#include <stdint.h>
#include <stdbool.h>
#include "15348.h"
#include "time.h"
#include "serial.h"

void PLLInit()
{
    SYSCTL_RCC2_R |= 0x80000000;
    SYSCTL_RCC2_R |= 0x00000800;
    SYSCTL_RCC_R = (SYSCTL_RCC_R & ~0x000007C0) + 0x00000540;
    SYSCTL_RCC2_R &= ~0x00000070;
    SYSCTL_RCC2_R &= ~0x00002000;
    SYSCTL_RCC2_R |= 0x40000000;
    SYSCTL_RCC2_R = (SYSCTL_RCC2_R & ~0x1FC00000) + (4 << 22);
    while ((SYSCTL_RIS_R &0x00000040)==0){};
    SYSCTL_RCC2_R &= ~0x00000800;
}


// Used for motor driver: PB2, PB3
void PortB_Init(void) {
    volatile unsigned long delay;
    SYSCTL_RCGC2_R |= 0x00000002;     // 1) B clock
    delay = SYSCTL_RCGC2_R; // reading register adds a delay, which we might need
    GPIO_PORTB_LOCK_R = 0x4C4F434B;   // 2) unlock PortB
    GPIO_PORTB_CR_R = 0x0C;           // 3) allow changes to PB2
    GPIO_PORTB_AMSEL_R = 0x00;        // 4) disable analog function
    GPIO_PORTB_AFSEL_R = 0x00;        // 5) no alternate function
    GPIO_PORTB_PCTL_R = 0x00000000;   // 6) GPIO clear bit PCTL
    GPIO_PORTB_PDR_R = 0x00;          // 7) disable pulldown resistors on PB2
    GPIO_PORTB_DEN_R = 0x0C;          // 8) enable digital pins PB2-PB3
    GPIO_PORTB_DIR_R = 0x0C;          // 9) PB2-PB3 output
}


// Used for motor driver: PD2, PD3
void PortD_Init(void) {
    volatile unsigned long delay;
    SYSCTL_RCGC2_R |= 0x00000008;     // 1) D clock
    delay = SYSCTL_RCGC2_R; // reading register adds a delay, which we might need
    GPIO_PORTD_LOCK_R = 0x4C4F434B;   // 2) unlock PortD
    GPIO_PORTD_CR_R = 0x0E;           // 3) allow changes to PD2-PD3
    GPIO_PORTD_AMSEL_R = 0x00;        // 4) disable analog function
    GPIO_PORTD_AFSEL_R = 0x00;        // 5) no alternate function
    GPIO_PORTD_PCTL_R = 0x00000000;   // 6) GPIO clear bit PCTL
    GPIO_PORTD_PDR_R = 0x00;          // 7) disable pulldown resistors on PD2-PD3
    GPIO_PORTD_DEN_R = 0x0E;          // 8) enable digital pins PD2-PD3
    GPIO_PORTD_DIR_R = 0x0E;          // 9) PD2-PD3 output
}

// Used for servo motor: PE4, PE5
// Used for motor driver: PE2, PE3
void PortE_Init(void) {
    volatile unsigned long delay;
    SYSCTL_RCGC2_R |= 0x00000010;     // 1) E clock
    delay = SYSCTL_RCGC2_R; // reading register adds a delay, which we might need
    GPIO_PORTE_LOCK_R = 0x4C4F434B;   // 2) unlock PortE
    GPIO_PORTE_CR_R = 0x3C;           // 3) allow changes to PE2-PE5
    GPIO_PORTE_AMSEL_R = 0x00;        // 4) disable analog function
    GPIO_PORTE_AFSEL_R = 0x00;        // 5) no alternate function
    GPIO_PORTE_PCTL_R = 0x00000000;   // 6) GPIO clear bit PCTL
    GPIO_PORTE_PDR_R = 0x00;          // 7) disable pulldown resistors on PE2-PE5
    GPIO_PORTE_DEN_R = 0x3C;          // 8) enable digital pins PE2-PE5
    GPIO_PORTE_DIR_R = 0x3C;          // 9) PE2-PE5 output
}

void PortF_Init(void) {
    volatile unsigned long delay;
    SYSCTL_RCGC2_R |= 0x00000020;     // 1) E clock
    delay = SYSCTL_RCGC2_R; // reading register adds a delay, which we might need
    GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock PortE
    GPIO_PORTF_CR_R = 0x01;           // 3) allow changes to PE2-PE5
    GPIO_PORTF_AMSEL_R = 0x00;        // 4) disable analog function
    GPIO_PORTF_AFSEL_R = 0x00;        // 5) no alternate function
    GPIO_PORTF_PCTL_R = 0x00000000;   // 6) GPIO clear bit PCTL
    GPIO_PORTF_PDR_R = 0x00;          // 7) disable pulldown resistors on PE4-PE5
    GPIO_PORTF_DEN_R = 0x01;          // 8) enable digital pins PE2-PE5
    GPIO_PORTF_DIR_R = 0x01;          // 9) PF1 output
}





// Used for DC motors: PB6-PB7
void PWM_Init(uint16_t period, uint16_t duty) {
    volatile unsigned long delay;

    SYSCTL_RCC_R |= 0x00100000;       // USEPWMDIV set to 1
    SYSCTL_RCC_R &= ~0x000E0000;      // PWMDIV set to 2
    SYSCTL_RCGC0_R |= 0x00100000;     // Enable Clock for PWM Module
    SYSCTL_RCGC2_R |= 0x00000002;     // Port B clock gating control
    delay = SYSCTL_RCGC2_R;           // delay

    GPIO_PORTB_CR_R |= 0xC0;      // allow changes to PB6-7
    GPIO_PORTB_AMSEL_R &= 0x00;   // disable analog function
    GPIO_PORTB_DEN_R |= 0xC0;     // Enable Digital Pins
    GPIO_PORTB_DIR_R |= 0xC0;     // Direction Output
    GPIO_PORTB_AFSEL_R |= 0xC0;   // PWM alternate function on PB6-7
    GPIO_PORTB_PCTL_R = (GPIO_PORTB_PCTL_R&0x00FFFFFF)+0x44000000;

    PWM0_0_CTL_R = 0x00;
    PWM0_0_GENA_R |= 0x8C;      // Settings for pwmA
    PWM0_0_GENB_R |= 0x80C;     // Settings for pwmB
    PWM0_0_LOAD_R = period - 1;

    PWM0_0_CMPA_R = duty - 1;
    PWM0_0_CMPB_R = duty - 1;

    PWM0_0_CTL_R |= 0x00000001;       // PWM Gen0 Timers Start
    PWM0_ENABLE_R |= 0x00000003;      // PWM Output Enable
}

void PWM0A_Duty(uint16_t duty){
    PWM0_0_CMPA_R = duty - 1;
}

void PWM0B_Duty(uint16_t duty){
    PWM0_0_CMPB_R = duty - 1;
}

//Used for UART: PE0, PE1
void UART7_Init(void){
    SYSCTL_RCGCUART_R |= 0x80;
    SYSCTL_RCGCGPIO_R |= 0x10;

    UART7_CTL_R &= ~0x01;
    UART7_IBRD_R = 520; //130;
    UART7_FBRD_R = 53;   //13;
    UART7_LCRH_R = 0x0060;
    UART7_CTL_R |= 0x301;

    GPIO_PORTE_AMSEL_R &= ~0x03;
    GPIO_PORTE_AFSEL_R |= 0x03;
    GPIO_PORTE_DEN_R |= 0x03;
    GPIO_PORTE_PCTL_R |= 0x11;
}


char UART7_recv(void){
    while((UART7_FR_R & 0x10) != 0);
    return ((char)(UART7_DR_R & 0xFF));
}

void UART7_send_char(char data){
    while((UART7_FR_R & 0x20) != 0);
    UART7_DR_R = data;
}

void UART7_send(char* data) {
    while(*data != '\0') {
        UART7_send_char(*data++);
    }
}



void SysTickInterrupt_Init() {
    NVIC_ST_CTRL_R = 0;
    NVIC_ST_RELOAD_R = 80000; // 2 ms
    NVIC_ST_CURRENT_R = 0;
    NVIC_ST_CTRL_R = 0x00000007;
}


int dist;
int dir = 0; // Change back to 0 when done
int count = 0;
int servo_per = 0;
int curr_pos = 20;
bool shd_move = false;
bool available = false;
void SysTick_Handler(void){
    count++;
    servo_per++;

    /*
    if(shd_move){
        if(10 * curr_pos >= servo_per){
            GPIO_PORTE_DATA_R |= 0x30;
        }
        else
            GPIO_PORTE_DATA_R &= ~0x30;
    }

    if(shd_move && servo_per == 2000)
        shd_move = false;
    */

    servo_per %= 2000;
    count %= 50000;
}

void Timer1A_Handler(void){
    // Acknowledge the interrupt
    TIMER1_CTL_R = 0x00;
    TIMER1_ICR_R = 0x00000004;

    // Compute distance
    int top = 0x00FF3F1A;
    int exp = TIMER1_TAR_R;
    dist = ((top - exp) / (1 << (int)(top / (exp >> 1))) / (200 * (1 << (int)(top / (exp >> 1)))));

    // Close timer for accuracy of data
    GPIO_PORTB_AFSEL_R &= ~0x10;
    GPIO_PORTB_PCTL_R &= ~0x000F0000;
    SYSCTL_RCGCTIMER_R &= ~0x02;

    // Set distance availability
    available = true;
}

void ultrasonic_send(void){
    SYSCTL_RCGC2_R |= 0x00000008;     // 1) E clock
    GPIO_PORTB_LOCK_R = 0x4C4F434B;   // 2) unlock PortE
    GPIO_PORTB_CR_R = 0x10;           // 3) allow changes to PE4-PE5
    GPIO_PORTB_AMSEL_R &= ~0x10;        // 4) disable analog function
    GPIO_PORTB_AFSEL_R &= ~0x10;        // 5) no alternate function
    GPIO_PORTB_PCTL_R &= ~0x000F0000;   // 6) GPIO clear bit PCTL
    GPIO_PORTB_PUR_R |= 0x00;          // 7) disable pulldown resistors on PE4-PE5
    GPIO_PORTB_DEN_R |= 0x10;          // 8) enable digital pins PE4-PE5
    GPIO_PORTB_DIR_R |= 0x10;          // 9) PE4-PE5 output
    GPIO_PORTB_DATA_R |= 0x10;

    count = 0;
    NVIC_ST_CURRENT_R = 0;

    // Wait 10 microseconds
    int i;
    for(i=0;i<800;i++){};

    GPIO_PORTB_DATA_R &= ~0x10;
    Timer1A_Init();
}




void configSlave(){
    int state = 0;
    while(state <= 4){
        char data[2] = {0,0};
        switch(state){
            case 0:
                UART7_send("AT+ROLE=0\r\n");
                state = 1;
                break;

            case 2:
                UART7_send("AT+ADDR?\r\n");
                state = 3;
                break;

            default:
                data[0] = UART7_recv();
                SerialWrite(data);
                state += (data[0] == '\n');
                break;
        }
    }

    SerialWriteLine("Protocol Done");
}

/*
//Servo set on PE4
//Function to position servo_motor at specific position.
//The function takes a single step towards that direction.
//dir = 1/0/-1
int position_servo(int curr_pos, int dir){
    if(10 <= curr_pos + dir && curr_pos + dir <= 20){
        curr_pos += dir;
        GPIO_PORTE_DATA_R |= 0x30;
        SysTick_Wait100microsec(curr_pos);
        GPIO_PORTE_DATA_R &= ~0x30;
        SysTick_Wait10ms(7);
    }

    return curr_pos;
}
*/


//Tiny Servo set on PE4
//Function to position servo_motor at specific position.
//The function takes a single step towards that direction.
//dir = 1/0/-1
int position_servo(int curr_pos, int dir){
    if(10 <= curr_pos + dir && curr_pos + dir <= 20){
        curr_pos += dir;
        GPIO_PORTE_DATA_R |= 0x30;
        SysTick_Wait100microsec(curr_pos);
        GPIO_PORTE_DATA_R &= ~0x30;
        SysTick_Wait100microsec(180-curr_pos);
    }

    return curr_pos;
}





//PB4 timer for ultrasonic
void Timer1A_Init(){
    SYSCTL_RCGCTIMER_R |= 0x02; // Activate Timer 0
    SYSCTL_RCGCGPIO_R |= 0x02;  // Activate Port B
    GPIO_PORTB_DIR_R &= ~0x10;  // Make PB6 an input
    GPIO_PORTB_AFSEL_R |= 0x10; // Alternate Functionality Select for PB6
    GPIO_PORTB_DEN_R |= 0x10;   // Enable Digital Functionality
    GPIO_PORTB_PCTL_R = (GPIO_PORTB_PCTL_R & 0xFFF0FFFF) + 0x00070000;

    TIMER1_CTL_R &= ~0x00000001;    // Disable timer 0 for configuration
    TIMER1_CFG_R = 0x00000004;      // Configure for 16-bit capture mode
    TIMER1_TAMR_R = 0x00000007;     // Edge time mode and capture mode
    TIMER1_CTL_R &= ~0x0000000C;    // configure for both edges
    TIMER1_TAILR_R = 0x00FFFFFF;    // Start value for count down
    TIMER1_TAPR_R = 0xFF;            // Activate pre-scale (24-bit timer)
    TIMER1_IMR_R |= 0x00000004;     // Enable Input capture interrupts
    TIMER1_CTL_R |= 0x00000007;     // Timer 0A 24-bit, rising edge

    NVIC_PRI5_R = (NVIC_PRI5_R&0xFFFF00FF) | 0x00040000;
    NVIC_EN0_R = 1<<21;
}






/**
 * main.c
 */
int main(void)
{
    //int i;
    PLLInit();
    SetupSerial();
    SerialWriteLine("Start");

    PortB_Init();
    PortD_Init();
    PortE_Init();
    PortF_Init();

    SystickInit();
    SysTickInterrupt_Init();
    PWM_Init(4001, 4000);

    UART7_Init();
    //configSlave();

    count = 0;
    int avg = 0;
    int cnt = 0;
    int duty = 4000;
    int lower_duty = 4000;

    // Configure DC motor output pins (CCW rotation)
    GPIO_PORTD_DATA_R |= 0x08;      // a) lower motors
    GPIO_PORTB_DATA_R |= 0x08;      // b) direction motor

    while(1){
        char data[2] = {0,0};

        data[0] = UART7_recv();
        SerialWriteLine(data);

        // Read Bluetooth module - dead position
        if(data[0] == 'X'){
            dir = 0;
            if(curr_pos > 16)
                dir = -1;
            if(curr_pos < 14)
                dir = 1;
        }

        // Read Bluetooth module - left position
        if(data[0] == 'L') dir = -1;

        // Read Bluetooth module - right position
        if(data[0] == 'R') dir = 1;

        //if(!shd_move && dir == 1 && curr_pos < 20){shd_move = true; curr_pos++;}
        //if(!shd_move && dir == -1 && curr_pos > 10){ shd_move = true; curr_pos--;}

        //Update servo w.r.t. position
        if(dir != 0){
            curr_pos = position_servo(curr_pos, dir);
            SerialWriteInt(curr_pos);
        }

        // Give lower motor power
        if(data[0] == 'U' && lower_duty >= 10){
            lower_duty -= 10;
            PWM0B_Duty(lower_duty);
        }

        // Reduce lower motor power
        if(data[0] == 'D' && lower_duty <= 3990){
            lower_duty += 10;
            PWM0B_Duty(lower_duty);
        }


        // Read Bluetooth module - button 1 clicked
        if(data[0] == '1' && duty >= 200){

            // Increase speed of DC motor by reducing duty-cycle.
            duty = duty - 200;
            PWM0A_Duty(duty);
        }

        // Read Bluetooth module - button 2 clicked
        if(data[0] == '2' && duty <= 3800){

            // Decrese speed of DC motor by adding duty-cycle.
            duty = duty + 200;
            PWM0A_Duty(duty);
        }


        // Activate ultrasonic
        if(count >= 150){
            count = 0;
            ultrasonic_send();
            available = false;
        }


        // Distance was processed
        if(available){
            cnt++;
            available = false;
            avg +=  dist;

            // Create linear function for decreasing speed
            // if objects are nearby
            if(cnt == 5 && (avg / 5) <= 40){
                if(avg / 5 < 5){
                    // Make motor spin backwards
                    GPIO_PORTB_DATA_R |= 0x04;
                    duty = 2000;
                    PWM0A_Duty(duty);
                } else if(avg / 5 < 10){
                    duty = 3600;
                    PWM0A_Duty(duty);
                }
                else{
                    duty = 4000 - 50 * (avg / 5);
                    PWM0A_Duty(duty);
                }
            }

            // Make motors move forward again
            if(cnt == 5 && (avg / 5) > 40)
                GPIO_PORTB_DATA_R |= 0x08;

            if(cnt == 5){
                SerialWriteInt(avg / 5);
                avg = 0;
                cnt = 0;
            }
        }
    }


	return 0;
}
